version: "3.8"

services:
  redis:
    image: redis:6
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  postgres-db:
    image: postgres:13
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - stock-exchange2:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  api:
    build:
      context: ./api
    ports:
      - "3000:3000"
    depends_on:
      postgres-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
    networks:
      - app-network

  db:
    build:
      context: ./db
    depends_on:
      postgres-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres-db
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - app-network

  engine:
    build:
      context: ./engine
    depends_on:
      redis:
        condition: service_healthy
    environment:
      REDIS_URL: ${REDIS_URL}
    networks:
      - app-network

  ws:
    build:
      context: ./ws
    depends_on:
      redis:
        condition: service_healthy
    environment:
      REDIS_URL: ${REDIS_URL}
    ports:
      - "3001:3001"
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
    ports:
      - "3002:3002" # Assuming frontend runs on this port
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL} # Backend API URL for the frontend
    networks:
      - app-network

volumes:
  stock-exchange2:

networks:
  app-network:
    driver: bridge
